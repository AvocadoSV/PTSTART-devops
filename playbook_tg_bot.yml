---
- hosts: database
  become: true
  tasks:
    - name: Install PostgreSQL 
      apt:
        name: 
          - postgresql 
          - postgresql-contrib
        state: present
        update_cache: yes

    - name: Configure postgresql.conf
      template:
        src: templates/postgresql.conf.j2
        dest: /etc/postgresql/13/main/postgresql.conf
      notify: restart postgresql


    - name: Create archive directory for PostgreSQL
      file:
        path: /var/lib/postgresql/13/main/archive
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    
    - name: Configure pg_hba.conf
      template:
        src: pg_hba.conf
        dest: /etc/postgresql/13/main/pg_hba.conf
      notify: restart postgresql

    - name: Install pip for Python 3
      apt:
        name: python3-pip
        state: present
      become: true

    - name: Install psycopg2 Python library
      pip:
        name: psycopg2-binary
        state: present

    - name: Install dotenv Python module
      pip:
        name: python-dotenv
        state: present
        
    - name: Create replication_db database if it doesn't exist
      community.postgresql.postgresql_db:
        name: replication_db
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
      when: inventory_hostname == "db_primary"

    - name: Create the phone_numbers table if it doesn't exist
      community.postgresql.postgresql_query:
        db: replication_db
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
        query: "CREATE TABLE IF NOT EXISTS phone_numbers (id SERIAL PRIMARY KEY, phone_number VARCHAR(20))"
      when: inventory_hostname == "db_primary"

    - name: Ensure replication user exists
      community.postgresql.postgresql_user:
        name: "{{ DB_REPL_USER }}"
        password: "{{ DB_REPL_PASSWORD }}"
        role_attr_flags: LOGIN,REPLICATION
        state: present
        db: replication_db
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
        connect_params:
          host: "{{ DB_HOST }}"
          port: "{{ DB_PORT }}"
      when: inventory_hostname == "db_primary"

    - name: Install pexpect Python module
      pip:
        name: pexpect
        state: present

    - name: Stop PostgreSQL on replica
      systemd:
        name: postgresql
        state: stopped

    - name: Take base backup from master
      command: pg_basebackup -R -h {{ DB_HOST }} -U {{ DB_REPL_USER }} -D /var/lib/postgresql/13/main -P
      args:
        creates: /var/lib/postgresql/13/main/pg_replslot

    - name: Take base backup from master
      expect:
        command: pg_basebackup -R -h "{{ DB_HOST }}" -U "{{ DB_REPL_USER }}" -D /var/lib/postgresql/13/main -P
        responses:
          Password: "{{ DB_REPL_PASSWORD }}"
      args:
        creates: /var/lib/postgresql/13/main/pg_replslot

    - name: Start PostgreSQL on replica
      systemd:
        name: postgresql
        state: started

    - name: Configure recovery.conf
      template:
        src: templates/recovery.conf.j2
        dest: /var/lib/postgresql/13/main/recovery.conf
      notify: restart postgresql
      when: inventory_hostname == "db_replica"

  handlers:
    - name: restart postgresql
      service: 
        name: postgresql 
        state: restarted

- hosts: registry
  become: yes
  tasks:
    - name: Install Docker
      apt:
        name: docker.io 
        state: present
        update_cache: yes
    - name: Install Docker Compose 
      apt:
        name: docker-compose
        state: present
        update_cache: yes
    - name: Create Docker registry directory
      file:
        path: /home/debian/docker-registry			
        state: directory
        mode: 0777

    - name: Start Docker registry
      docker_container:
        name: registry
        image: registry:2
        state: started
        restart_policy: always
        published_ports:
          - "5000:5000"
        volumes:
          - /home/debian/docker-registry:/home/debian/docker-registry     

- hosts: bot
  become: true
  vars:
    TOKEN: "7162717177:AAENKN8pRgW2opreeTrELVqSJwWhq-c_8pQ"
  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes
    - name: Install Docker Compose 
      apt:
        name: docker-compose
        state: present
        update_cache: yes
    - name: Install git
      apt:
        name: git
        state: present
        update_cache: yes

    - name: Clone telegram bot repository
      git:
        repo: https://github.com/AvocadoSV/PTSTART-devops.git
        dest: /opt/telegram_bot    

    - name: Check if daemon.json exists
      stat:
        path: /etc/docker/daemon.json
      register: daemon_json_stat

    - name: Create daemon.json if it doesn't exist
      file:
        path: /etc/docker/daemon.json
        state: touch
      when: daemon_json_stat.stat.exists == False

    - name: Add insecure registry option to Docker Daemon configuration
      lineinfile:
        path: /etc/docker/daemon.json
        line: '{"insecure-registries": ["192.168.64.29:5000"]}'
        backup: yes

    - name: Reload Docker Service
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes

    - name: Install dotenv Python module
      pip:
        name: python-dotenv
        state: present

    - name: Create .env file for bot configuration
      template:
        src: templates/f.env
        dest: /opt/telegram_bot/.env

    - name: Build bot Docker image
      docker_image:
        name: "192.168.64.29:5000/bot_image"
        build:
          path: /opt/telegram_bot/bot
        source: build
        push: yes

    - name: Build primary database Docker image
      docker_image:
        name: "192.168.64.29:5000/db_image"
        build:
          path: /opt/telegram_bot/db_primary
        source: build
        push: yes

    - name: Build replica database Docker image
      docker_image:
        name: "192.168.64.29:5000/db_repl_image"
        build:
          path: /opt/telegram_bot/db_replica
        source: build
        push: yes
        
    - name: Start Telegram bot stack
      docker_compose:
        project_src: /opt/telegram_bot
        state: present
      environment:
        TOKEN: "{{ TOKEN }}"
